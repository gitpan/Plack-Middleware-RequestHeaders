.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla::Dist::Builder 3"
.TH Dist::Zilla::Dist::Builder 3 "2012-05-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla::Dist::Builder \- dist zilla subclass for building dists
.SH "VERSION"
.IX Header "VERSION"
version 4.300016
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "built_in"
.IX Subsection "built_in"
This is the Path::Class::Dir, if any, in which the dist has been built.
.SH "METHODS"
.IX Header "METHODS"
.SS "from_config"
.IX Subsection "from_config"
.Vb 1
\&  my $zilla = Dist::Zilla\->from_config(\e%arg);
.Ve
.PP
This routine returns a new Zilla from the configuration in the current working
directory.
.PP
This method should not be relied upon, yet.  Its semantics are \fBcertain\fR to
change.
.PP
Valid arguments are:
.PP
.Vb 2
\&  config_class \- the class to use to read the config
\&                 default: Dist::Zilla::MVP::Reader::Finder
.Ve
.SS "build_in"
.IX Subsection "build_in"
.Vb 1
\&  $zilla\->build_in($root);
.Ve
.PP
This method builds the distribution in the given directory.  If no directory
name is given, it defaults to DistName-Version.  If the distribution has
already been built, an exception will be thrown.
.SS "build"
.IX Subsection "build"
This method just calls \f(CW\*(C`build_in\*(C'\fR with no arguments.  It gets you the default
behavior without the weird-looking formulation of \f(CW\*(C`build_in\*(C'\fR with no object
for the preposition!
.SS "ensure_built_in"
.IX Subsection "ensure_built_in"
.Vb 1
\&  $zilla\->ensure_built_in($root);
.Ve
.PP
This method behaves like \f(CW"build_in"\fR, but if the dist is already built in
\&\f(CW$root\fR (or the default root, if no root is given), no exception is raised.
.SS "ensure_built_in"
.IX Subsection "ensure_built_in"
This method just calls \f(CW\*(C`ensure_built_in\*(C'\fR with no arguments.  It gets you the
default behavior without the weird-looking formulation of \f(CW\*(C`ensure_built_in\*(C'\fR
with no object for the preposition!
.SS "dist_basename"
.IX Subsection "dist_basename"
.Vb 1
\&  my $basename = $zilla\->dist_basename;
.Ve
.PP
This method will return the dist's basename (e.g. \f(CW\*(C`Dist\-Name\-1.01\*(C'\fR.
The basename is used as the top-level directory in the tarball.  It
does not include \f(CW\*(C`\-TRIAL\*(C'\fR, even if building a trial dist.
.SS "archive_filename"
.IX Subsection "archive_filename"
.Vb 1
\&  my $tarball = $zilla\->archive_filename;
.Ve
.PP
This method will return the filename (e.g. \f(CW\*(C`Dist\-Name\-1.01.tar.gz\*(C'\fR)
of the tarball of this dist.  It will include \f(CW\*(C`\-TRIAL\*(C'\fR if building a
trial dist.  The tarball might not exist.
.SS "build_archive"
.IX Subsection "build_archive"
.Vb 1
\&  $zilla\->build_archive;
.Ve
.PP
This method will ensure that the dist has been built, and will then build a
tarball of the build directory in the current directory.
.SS "release"
.IX Subsection "release"
.Vb 1
\&  $zilla\->release;
.Ve
.PP
This method releases the distribution, probably by uploading it to the \s-1CPAN\s0.
The actual effects of this method (as with most of the methods) is determined
by the loaded plugins.
.SS "clean"
.IX Subsection "clean"
This method removes temporary files and directories suspected to have been
produced by the Dist::Zilla build process.  Specifically, it deletes the
\&\fI.build\fR directory and any entity that starts with the dist name and a hyphen,
like matching the glob \f(CW\*(C`Your\-Dist\-*\*(C'\fR.
.SS "install"
.IX Subsection "install"
.Vb 1
\&  $zilla\->install( \e%arg );
.Ve
.PP
This method installs the distribution locally.  The distribution will be built
in a temporary subdirectory, then the process will change directory to that
subdir and an installer will be run.
.PP
Valid arguments are:
.PP
.Vb 2
\&  install_command \- the command to run in the subdir to install the dist
\&                    default (roughly): $^X \-MCPAN \-einstall .
\&
\&                    this argument should be an arrayref
.Ve
.SS "test"
.IX Subsection "test"
.Vb 1
\&  $zilla\->test;
.Ve
.PP
This method builds a new copy of the distribution and tests it using
\&\f(CW"run_tests_in"\fR.
.SS "run_tests_in"
.IX Subsection "run_tests_in"
.Vb 1
\&  my $error = $zilla\->run_tests_in($directory);
.Ve
.PP
This method runs the tests in \f(CW$directory\fR (a Path::Class::Dir), which
must contain an already-built copy of the distribution.  It will throw an
exception if there are test failures.
.PP
It does \fInot\fR set any of the \f(CW*_TESTING\fR environment variables, nor
does it clean up \f(CW$directory\fR afterwards.
.SS "run_in_build"
.IX Subsection "run_in_build"
.Vb 1
\&  $zilla\->run_in_build( \e@cmd );
.Ve
.PP
This method makes a temporary directory, builds the distribution there,
executes the dist's first BuildRunner, and
then runs the given command in the build directory.  If the command exits
non-zero, the directory will be left in place.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Ricardo \s-1SIGNES\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
