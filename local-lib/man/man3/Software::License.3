.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Software::License 3"
.TH Software::License 3 "2011-11-03" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Software::License \- packages that provide templated software licenses
.SH "VERSION"
.IX Header "VERSION"
version 0.103004
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  my $license = Software::License::Discordian\->new({
\&    holder => \*(AqRicardo Signes\*(Aq,
\&  });
\&
\&  print $output_fh $license\->fulltext;
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  my $license = $subclass\->new(\e%arg);
.Ve
.PP
This method returns a new license object for the given license class.  Valid
arguments are:
.PP
.Vb 2
\&  holder \- the holder of the copyright; required
\&  year   \- the year of copyright; defaults to current year
.Ve
.SS "year"
.IX Subsection "year"
.SS "holder"
.IX Subsection "holder"
These methods are attribute readers.
.SS "name"
.IX Subsection "name"
This method returns the name of the license, suitable for shoving in the middle
of a sentence, generally with a leading capitalized \*(L"The.\*(R"
.SS "url"
.IX Subsection "url"
This method returns the \s-1URL\s0 at which a canonical text of the license can be
found, if one is available.  If possible, this will point at plain text, but it
may point to an \s-1HTML\s0 resource.
.SS "notice"
.IX Subsection "notice"
This method returns a snippet of text, usually a few lines, indicating the
copyright holder and year of copyright, as well as an indication of the license
under which the software is distributed.
.SS "license"
.IX Subsection "license"
This method returns the full text of the license.
.SS "fulltext"
.IX Subsection "fulltext"
This method returns the complete text of the license, preceded by the copyright
notice.
.SS "version"
.IX Subsection "version"
This method returns the version of the license.  If the license is not
versioned, this method will return false.
.SS "meta_name"
.IX Subsection "meta_name"
This method returns the string that should be used for this license in the \s-1CPAN\s0
\&\s-1META\s0.yml file, according to the \s-1CPAN\s0 Meta spec v1, or undef if there is no
known string to use.
.PP
This method may also be invoked as \f(CW\*(C`meta_yml_name\*(C'\fR for legacy reasons.
.SS "meta2_name"
.IX Subsection "meta2_name"
This method returns the string that should be used for this license in the \s-1CPAN\s0
\&\s-1META\s0.json or \s-1META\s0.yml file, according to the \s-1CPAN\s0 Meta spec v2, or undef if
there is no known string to use.  If this method does not exist, and
\&\f(CW\*(C`meta_name\*(C'\fR returns open_source, restricted, unrestricted, or unknown, that
value will be used.
.SH "LOOKING UP LICENSE CLASSES"
.IX Header "LOOKING UP LICENSE CLASSES"
If you have an entry in a \fI\s-1META\s0.yml\fR or \fI\s-1META\s0.json\fR file, or similar
metadata, and want to look up the Software::License class to use, there are
useful tools in Software::LicenseUtils.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
register licenses with aliases to allow \f(CW$registry\fR\->get('gpl', 2);
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The specific license:
.IP "\(bu" 4
Software::License::AGPL_3
.IP "\(bu" 4
Software::License::Apache_1_1
.IP "\(bu" 4
Software::License::Apache_2_0
.IP "\(bu" 4
Software::License::Artistic_1_0
.IP "\(bu" 4
Software::License::Artistic_2_0
.IP "\(bu" 4
Software::License::BSD
.IP "\(bu" 4
Software::License::CC0
.IP "\(bu" 4
Software::License::FreeBSD
.IP "\(bu" 4
Software::License::GFDL_1_2
.IP "\(bu" 4
Software::License::GPL_1
.IP "\(bu" 4
Software::License::GPL_2
.IP "\(bu" 4
Software::License::GPL_3
.IP "\(bu" 4
Software::License::LGPL_2_1
.IP "\(bu" 4
Software::License::LGPL_3_0
.IP "\(bu" 4
Software::License::MIT
.IP "\(bu" 4
Software::License::Mozilla_1_0
.IP "\(bu" 4
Software::License::Mozilla_1_1
.IP "\(bu" 4
Software::License::None
.IP "\(bu" 4
Software::License::OpenSSL
.IP "\(bu" 4
Software::License::Perl_5
.IP "\(bu" 4
Software::License::QPL_1_0
.IP "\(bu" 4
Software::License::SSLeay
.IP "\(bu" 4
Software::License::Sun
.IP "\(bu" 4
Software::License::Zlib
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
