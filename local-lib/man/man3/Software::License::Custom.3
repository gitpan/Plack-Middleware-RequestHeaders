.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Software::License::Custom 3"
.TH Software::License::Custom 3 "2011-11-03" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Software::License::Custom \- custom license handler
.SH "VERSION"
.IX Header "VERSION"
version 0.103004
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module extends Software::License to give the possibility of specifying
all aspects related to a software license in a custom file.  This allows for
setting custom dates, notices, etc. while still preserving compatibility with
all places where Software::License is used, e.g. Dist::Zilla.
.PP
In this way, you should be able to customise some aspects of the licensing
messages that would otherwise be difficult to tinker, e.g. adding a note
in the notice, setting multiple years for the copyright notice or set multiple
authors and/or copyright holders.
.PP
The license details should be put inside a file that contains different
sections. Each section has the following format:
.IP "header line" 4
.IX Item "header line"
This is a line that begins and ends with two underscores \f(CW\*(C`_\|_\*(C'\fR. The string
between the begin and the end of the line is first depured of any non-word
character, then used as the name of the section;
.IP "body" 4
.IX Item "body"
a Text::Template (possibly a plain text file) where items to be
expanded are enclosed between double braces
.PP
Each section is terminated by the header of the following section or by
the end of the file. Example:
.PP
.Vb 11
\&   _\|_[ NAME ]_\|_
\&   The Foo\-Bar License
\&   _\|_URL_\|_
\&   http://www.example.com/foo\-bar.txt
\&   _\|_[ META_NAME ]_\|_
\&   foo_bar_meta
\&   _\|_{ META2_NAME }_\|_
\&   foo_bar_meta2
\&   _\|_[ NOTICE ]_\|_
\&   Copyright (C) 2000\-2002 by P.R. Evious
\&   Copyright (C) {{$self\->year}} by {{$self\->holder}}.
\&
\&   This is free software, licensed under {{$self\->name}}.
\&
\&   _\|_[ LICENSE ]_\|_
\&               The Foo\-Bar License
\&
\&   Well... this is only some sample text.  Verily... only sample text!!!
\&
\&   Yes, spanning more lines and more paragraphs.
.Ve
.PP
The different formats for specifying the section name in the example
above are only examples, you're invited to use a consistent approach.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&   my $slc = Software::License::Custom\->new({filename => \*(AqLEGAL\*(Aq});
.Ve
.PP
Create a new object. Arguments are passed through an anonymous hash, the
following keys are allowed:
.PP
.Vb 1
\&  filename \- the file where the custom software license details are stored
.Ve
.SS "load_sections_from"
.IX Subsection "load_sections_from"
.Vb 1
\&   $slc\->load_sections_from(\*(AqMY\-LEGAL\-ASPECTS\*(Aq);
.Ve
.PP
Loads the different sections of the license from the provided filename.
.PP
Returns the input object.
.SS "section_data"
.IX Subsection "section_data"
.Vb 1
\&   my $notice_template_reference = $slc\->section_data(\*(AqNOTICE\*(Aq);
.Ve
.PP
Returns a reference to a textual template that can be fed to
Text::Template (it could be simple text), according to what is
currently loaded in the object.
.SH "MORE METHODS"
.IX Header "MORE METHODS"
The following methods, found in all software license classes, look up and
render the template with the capitalized form of their name.  In other words,
the \f(CW\*(C`license\*(C'\fR method looks in the \f(CW\*(C`LICENSE\*(C'\fR template.
.PP
For now, the \f(CW\*(C`meta_name\*(C'\fR and \f(CW\*(C`meta2_name\*(C'\fR methods return \f(CW\*(C`custom\*(C'\fR if called
on the class.  This may become fatal in the future.
.IP "\(bu" 4
name
.IP "\(bu" 4
url
.IP "\(bu" 4
meta_name
.IP "\(bu" 4
meta2_name
.IP "\(bu" 4
license
.IP "\(bu" 4
notice
.IP "\(bu" 4
fulltext
.IP "\(bu" 4
version
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Ricardo Signes.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
