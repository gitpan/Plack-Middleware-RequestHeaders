.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Dist::Zilla 3"
.TH Dist::Zilla 3 "2012-05-05" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Dist::Zilla \- distribution builder; installer not included!
.SH "VERSION"
.IX Header "VERSION"
version 4.300016
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Dist::Zilla builds distributions of code to be uploaded to the \s-1CPAN\s0.  In this
respect, it is like ExtUtils::MakeMaker, Module::Build, or
Module::Install.  Unlike those tools, however, it is not also a system for
installing code that has been downloaded from the \s-1CPAN\s0.  Since it's only run by
authors, and is meant to be run on a repository checkout rather than on
published, released code, it can do much more than those tools, and is free to
make much more ludicrous demands in terms of prerequisites.
.PP
If you have access to the web, you can learn more and find an interactive
tutorial at \fB<dzil.org>\fR.  If not, try
Dist::Zilla::Tutorial.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "name"
.IX Subsection "name"
The name attribute (which is required) gives the name of the distribution to be
built.  This is usually the name of the distribution's main module, with the
double colons (\f(CW\*(C`::\*(C'\fR) replaced with dashes.  For example: \f(CW\*(C`Dist\-Zilla\*(C'\fR.
.SS "version"
.IX Subsection "version"
This is the version of the distribution to be created.
.SS "abstract"
.IX Subsection "abstract"
This is a one-line summary of the distribution.  If none is given, one will be
looked for in the \*(L"main_module\*(R" of the dist.
.SS "main_module"
.IX Subsection "main_module"
This is the module where Dist::Zilla might look for various defaults, like
the distribution abstract.  By default, it's derived from the distribution
name.  If your distribution is Foo-Bar, and \fIlib/Foo/Bar.pm\fR exists,
that's the main_module.  Otherwise, it's the shortest-named module in the
distribution.  This may change!
.PP
You can override the default by specifying the file path explicitly,
ie:
.PP
.Vb 1
\&  main_module = lib/Foo/Bar.pm
.Ve
.SS "license"
.IX Subsection "license"
This is the Software::License object for this dist's
license and copyright.
.PP
It will be created automatically, if possible, with the
\&\f(CW\*(C`copyright_holder\*(C'\fR and \f(CW\*(C`copyright_year\*(C'\fR attributes.  If necessary, it will
try to guess the license from the \s-1POD\s0 of the dist's main module.
.PP
A better option is to set the \f(CW\*(C`license\*(C'\fR name in the dist's config to something
understandable, like \f(CW\*(C`Perl_5\*(C'\fR.
.SS "authors"
.IX Subsection "authors"
This is an arrayref of author strings, like this:
.PP
.Vb 4
\&  [
\&    \*(AqRicardo Signes <rjbs@cpan.org>\*(Aq,
\&    \*(AqX. Ample, Jr <example@example.biz>\*(Aq,
\&  ]
.Ve
.PP
This is likely to change at some point in the near future.
.SS "files"
.IX Subsection "files"
This is an arrayref of objects implementing Dist::Zilla::Role::File that
will, if left in this arrayref, be built into the dist.
.PP
Non-core code should avoid altering this arrayref, but sometimes there is not
other way to change the list of files.  In the future, the representation used
for storing files \fBwill be changed\fR.
.SS "root"
.IX Subsection "root"
This is the root directory of the dist, as a Path::Class::Dir.  It will
nearly always be the current working directory in which \f(CW\*(C`dzil\*(C'\fR was run.
.SS "is_trial"
.IX Subsection "is_trial"
This attribute tells us whether or not the dist will be a trial release.
.SS "plugins"
.IX Subsection "plugins"
This is an arrayref of plugins that have been plugged into this Dist::Zilla
object.
.PP
Non-core code \fBmust not\fR alter this arrayref.  Public access to this attribute
\&\fBmay go away\fR in the future.
.SS "distmeta"
.IX Subsection "distmeta"
This is a hashref containing the metadata about this distribution that will be
stored in \s-1META\s0.yml or \s-1META\s0.json.  You should not alter the metadata in this
hash; use a MetaProvider plugin instead.
.SS "prereqs"
.IX Subsection "prereqs"
This is a Dist::Zilla::Prereqs object, which is a thin layer atop
CPAN::Meta::Prereqs, and describes the distribution's prerequisites.
.SS "logger"
.IX Subsection "logger"
This attribute stores a Log::Dispatchouli::Proxy object, used to log
messages.  By default, a proxy to the dist's Chrome is
taken.
.PP
The following methods are delegated from the Dist::Zilla object to the logger:
.IP "\(bu" 4
log
.IP "\(bu" 4
log_debug
.IP "\(bu" 4
log_fatal
.SH "METHODS"
.IX Header "METHODS"
.SS "plugin_named"
.IX Subsection "plugin_named"
.Vb 1
\&  my $plugin = $zilla\->plugin_named( $plugin_name );
.Ve
.SS "plugins_with"
.IX Subsection "plugins_with"
.Vb 1
\&  my $roles = $zilla\->plugins_with( \-SomeRole );
.Ve
.PP
This method returns an arrayref containing all the Dist::Zilla object's plugins
that perform a the named role.  If the given role name begins with a dash, the
dash is replaced with \*(L"Dist::Zilla::Role::\*(R"
.SS "find_files"
.IX Subsection "find_files"
.Vb 1
\&  my $files = $zilla\->find_files( $finder_name );
.Ve
.PP
This method will look for a
FileFinder\-performing plugin with the given
name and return the result of calling \f(CW\*(C`find_files\*(C'\fR on it.  If no plugin can be
found, an exception will be raised.
.SS "stash_named"
.IX Subsection "stash_named"
.Vb 1
\&  my $stash = $zilla\->stash_named( $name );
.Ve
.PP
This method will return the stash with the given name, or undef if none exists.
It looks for a local stash (for this dist) first, then falls back to a global
stash (from the user's global configuration).
.SH "SUPPORT"
.IX Header "SUPPORT"
There are usually people on \f(CW\*(C`irc.perl.org\*(C'\fR in \f(CW\*(C`#distzilla\*(C'\fR, even if they're
idling.
.PP
The <Dist::Zilla website> has several valuable resources for
learning to use Dist::Zilla.
.PP
There is a mailing list to discuss Dist::Zilla.  You can <join the
list> or <browse the
archives>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
In the Dist::Zilla distribution:
.RS 4
.IP "\(bu" 4
Plugin bundles:
\&\f(CW@Basic\fR,
\&\f(CW@Filter\fR.
.IP "\(bu" 4
Major plugins:
GatherDir,
Prereqs,
AutoPrereqs,
MetaYAML,
MetaYAML,
\&...
.RE
.RS 4
.RE
.IP "\(bu" 4
On the \s-1CPAN:\s0
.RS 4
.IP "\(bu" 4
Search for plugins: <https://metacpan.org/search?q=Dist::Zilla::Plugin::>
.IP "\(bu" 4
Search for plugin bundles: <https://metacpan.org/search?q=Dist::Zilla::PluginBundle::>
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Ricardo \s-1SIGNES\s0 <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Ricardo \s-1SIGNES\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
