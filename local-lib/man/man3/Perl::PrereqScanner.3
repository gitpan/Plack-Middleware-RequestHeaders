.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::PrereqScanner 3"
.TH Perl::PrereqScanner 3 "2012-03-07" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::PrereqScanner \- a tool to scan your Perl code for its prerequisites
.SH "VERSION"
.IX Header "VERSION"
version 1.011
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  use Perl::PrereqScanner;
\&  my $scanner = Perl::PrereqScanner\->new;
\&  my $prereqs = $scanner\->scan_ppi_document( $ppi_doc );
\&  my $prereqs = $scanner\->scan_file( $file_path );
\&  my $prereqs = $scanner\->scan_string( $perl_code );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The scanner will extract loosely your distribution prerequisites from your
files.
.PP
The extraction may not be perfect but tries to do its best. It will currently
find the following prereqs:
.IP "\(bu" 4
plain lines beginning with \f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR in your perl modules and scripts, including minimum perl version
.IP "\(bu" 4
regular inheritance declared with the \f(CW\*(C`base\*(C'\fR and \f(CW\*(C`parent\*(C'\fR pragmata
.IP "\(bu" 4
Moose inheritance declared with the \f(CW\*(C`extends\*(C'\fR keyword
.IP "\(bu" 4
Moose roles included with the \f(CW\*(C`with\*(C'\fR keyword
.IP "\(bu" 4
\&\s-1OO\s0 namespace aliasing using the \f(CW\*(C`aliased\*(C'\fR module
.SS "Scanner Plugins"
.IX Subsection "Scanner Plugins"
Perl::PrereqScanner works by running a series of scanners over a PPI::Document
representing the code to scan.  By default the \*(L"Perl5\*(R", \*(L"Moose\*(R", \*(L"TestMore\*(R",
\&\*(L"\s-1POE\s0\*(R", and \*(L"Aliased\*(R" scanners are run.  You can supply your own scanners when
constructing your PrereqScanner:
.PP
.Vb 2
\&  # Us only the Perl5 scanner:
\&  my $scanner = Perl::PrereqScanner\->new({ scanners => [ qw(Perl5) ] });
\&
\&  # Use any stock scanners, plus Example:
\&  my $scanner = Perl::PrereqScanner\->new({ extra_scanners => [ qw(Example) ] });
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "scan_string"
.IX Subsection "scan_string"
.Vb 1
\&  my $prereqs = $scanner\->scan_string( $perl_code );
.Ve
.PP
Given a string containing Perl source code, this method returns a
CPAN::Meta::Requirements object describing the modules it requires.
.PP
This method will throw an exception if \s-1PPI\s0 fails to parse the code.
.SS "scan_file"
.IX Subsection "scan_file"
.Vb 1
\&  my $prereqs = $scanner\->scan_file( $path );
.Ve
.PP
Given a file path to a Perl document, this method returns a
CPAN::Meta::Requirements object describing the modules it requires.
.PP
This method will throw an exception if \s-1PPI\s0 fails to parse the code.
.SS "scan_ppi_document"
.IX Subsection "scan_ppi_document"
.Vb 1
\&  my $prereqs = $scanner\->scan_ppi_document( $ppi_doc );
.Ve
.PP
Given a PPI::Document, this method returns a CPAN::Meta::Requirements object
describing the modules it requires.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Jerome Quelin
.IP "\(bu" 4
Ricardo Signes <rjbs@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2009 by Jerome Quelin.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
